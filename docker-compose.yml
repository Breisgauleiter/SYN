version: '3.8'

services:
  # OrientDB Multi-Model Database (Graph + Document + Key-Value)
  orientdb:
    image: orientdb:3.2.15
    container_name: syntopia-orientdb
    environment:
      ORIENTDB_ROOT_PASSWORD: synverse_orient_2024
      ORIENTDB_NODE_NAME: consciousness-node
    ports:
      - "2424:2424"  # Binary protocol
      - "2480:2480"  # HTTP protocol + Studio
    volumes:
      - orientdb_data:/orientdb/databases
      - orientdb_config:/orientdb/config
    networks:
      - syntopia-consciousness-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2480/studio/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Neo4j Graph Analytics Database  
  neo4j:
    image: neo4j:5.15-community
    container_name: syntopia-neo4j
    environment:
      NEO4J_AUTH: neo4j/synverse_neo_2024
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_default__listen__address: 0.0.0.0
      NEO4J_dbms_connector_bolt_listen__address: 0.0.0.0:7687
      NEO4J_dbms_connector_http_listen__address: 0.0.0.0:7474
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    networks:
      - syntopia-consciousness-network
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "synverse_neo_2024", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Session & Caching
  redis:
    image: redis:7.2-alpine
    container_name: syntopia-redis
    command: redis-server --appendonly yes --requirepass synverse_redis_2024
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - syntopia-consciousness-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "synverse_redis_2024", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # PostgreSQL (Production Database Option)
  postgres:
    image: postgres:16-alpine
    container_name: syntopia-postgres
    environment:
      POSTGRES_DB: syntopia
      POSTGRES_USER: syntopia
      POSTGRES_PASSWORD: consciousness-db-2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - syntopia-consciousness-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U syntopia"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # SYNtopia Spring Boot Backend
  syntopia-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: syntopia-backend
    environment:
      SPRING_PROFILES_ACTIVE: development
      ORIENTDB_PASSWORD: synverse_orient_2024
      NEO4J_PASSWORD: synverse_neo_2024
      REDIS_PASSWORD: synverse_redis_2024
      JWT_SECRET: sacred-consciousness-technology-2024-very-long-secure-key
      ENCRYPTION_KEY: consciousness-encryption-key-2024
    ports:
      - "8081:8081"  # Sacred Consciousness Platform API
    depends_on:
      orientdb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - syntopia-consciousness-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Vue.js Frontend (Development)
  syntopia-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: syntopia-frontend
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:8081/api/v2
      VITE_GRAPHQL_URL: http://localhost:8081/graphql
    ports:
      - "5173:5173"  # Vite dev server
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - syntopia-consciousness-network
    depends_on:
      - syntopia-backend
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: syntopia-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - syntopia-consciousness-network
    restart: unless-stopped

  # Grafana Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: syntopia-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: consciousness-grafana-2024
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - syntopia-consciousness-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Hasura GraphQL Engine (Optional - for unified GraphQL)
  hasura:
    image: hasura/graphql-engine:v2.36.0
    container_name: syntopia-hasura
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://syntopia:consciousness-db-2024@postgres:5432/syntopia
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: consciousness-hasura-secret-2024
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - syntopia-consciousness-network
    restart: unless-stopped

volumes:
  # Database Volumes
  orientdb_data:
    driver: local
  orientdb_config:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  
  # Monitoring Volumes
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  syntopia-consciousness-network:
    driver: bridge
    name: syntopia-network
